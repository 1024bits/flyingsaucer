package tests.public_apis.css.properties.factory;

import java.io.*;
import java.util.*;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import com.steadystate.css.parser.CSSOMParser;
import org.w3c.css.sac.InputSource;
import org.w3c.dom.css.CSSRule;
import org.w3c.dom.css.*;
import org.w3c.dom.css.CSSRuleList;
import org.w3c.dom.css.CSSStyleDeclaration;
import org.w3c.dom.css.CSSStyleSheet;

import org.xhtmlrenderer.css.sheet.*;
import org.xhtmlrenderer.css.sheet.factory.*;
import org.xhtmlrenderer.css.constants.CSSName;
import org.xhtmlrenderer.util.*;
import tests.public_apis.css.FSCssTestCase;

/**
 * Border property assignment tests.
 *
 * @author   Patrick Wright
 */
public class PropertyExplosionTest extends TestCase {
    /**
     * Description of the Field
     */
    private CSSOMParser parser = new CSSOMParser();
    
    CSSStyleSheet cssStyleSheet;

    /**
     * Constructor for the FSCssTestCase object
     *
     * @param name  PARAM
     */
    public PropertyExplosionTest( String name ) {
        super( name );
    }
    
    protected void tearDown() {}
    
    protected void setUp() {
        InputSource is = new InputSource(new StringReader(getCSSText()));
        try {
            cssStyleSheet = parser.parseStyleSheet(is);
        } catch (java.io.IOException e) {
            throw new XRRuntimeException("IOException on parsing style seet from a Reader; don't know the URI.", e);
        }
    }

    /** A unit test for JUnit */
    public void testExplode() {
        PropertyDeclarationFactory factory = MarginPropertyDeclarationFactory.instance();

        String sel = null;
        CSSStyleDeclaration decl = null;
        String propName = null;
        int origin = StylesheetInfo.USER_AGENT;
        Map testMap = null;

        CSSRuleList rlist = cssStyleSheet.getCssRules();
        for ( int i=0; i < rlist.getLength(); i++ ) {
            CSSStyleRule rule = (CSSStyleRule)rlist.item(i);
            sel = rule.getSelectorText();
            decl = rule.getStyle();
            if ( sel.equals("p#OneToFour")) {
                testMap = getOneToFourMap();
            } else if ( sel.equals("p#TwoToFour")) {
                testMap = getTwoToFourMap();
            } else if ( sel.equals("p#ThreeToFour")) {
                testMap = getThreeToFourMap();
            } else if ( sel.equals("p#FourToFour")) {
                testMap = getFourToFourMap();
            }
            propName = decl.item(0);
            Iterator iter = factory.buildDeclarations( decl, propName, origin );
            while ( iter.hasNext()) {
                PropertyDeclaration pd = (PropertyDeclaration)iter.next();
                String expected = (String)testMap.get(pd.getName());
                assertEquals("Value for " + pd.getName() + " should be " +
                    expected, expected, pd.getValue().toString()); 
                
                // DEBUG: use this to verify comparisons by selector
                //System.out.println(sel + "=> " + pd);
            }
            
        }
    }
    
    private Map getOneToFourMap() {
        Map testVals = new TreeMap();
        testVals.put(CSSName.MARGIN_TOP, "1px");
        testVals.put(CSSName.MARGIN_BOTTOM, "1px");
        testVals.put(CSSName.MARGIN_RIGHT, "1px");
        testVals.put(CSSName.MARGIN_LEFT, "1px");
        return testVals;
    }

    private Map getTwoToFourMap() {
        Map testVals = new TreeMap();
        testVals.put(CSSName.MARGIN_TOP, "1px");
        testVals.put(CSSName.MARGIN_BOTTOM, "1px");
        testVals.put(CSSName.MARGIN_RIGHT, "2px");
        testVals.put(CSSName.MARGIN_LEFT, "2px");
        return testVals;
    }
    
    private Map getThreeToFourMap() {
        Map testVals = new TreeMap();
        testVals.put(CSSName.MARGIN_TOP, "1px");
        testVals.put(CSSName.MARGIN_RIGHT, "2px");
        testVals.put(CSSName.MARGIN_LEFT, "2px");
        testVals.put(CSSName.MARGIN_BOTTOM, "3px");
        return testVals;
    }

    private Map getFourToFourMap() {
        Map testVals = new TreeMap();
        testVals.put(CSSName.MARGIN_TOP, "1px");
        testVals.put(CSSName.MARGIN_RIGHT, "2px");
        testVals.put(CSSName.MARGIN_BOTTOM, "3px");
        testVals.put(CSSName.MARGIN_LEFT, "4px");
        return testVals;
    }

    protected String getDocumentText() { 
        return
        "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">" +
        "<head></head>" +
        "<body></body>" +
        "</html>";
    }

    protected String getCSSText() {
        return "   p#OneToFour { border-width: 1px; }" +
               "   p#TwoToFour { border-width: 1px 2px; }" +
               "   p#ThreeToFour { border-width: 1px 2px 3px; }" +
               "   p#FourToFour { border-width: 1px 2px 3px 4px; }";
    }

    /**
     * A unit test suite for JUnit
     *
     * @return   The test suite
     */
    public static Test suite() {
        return new TestSuite( PropertyExplosionTest.class );
    }
} // end class

/*

 * $Id$

 *

 * $Log$
 * Revision 1.1  2005/01/24 14:26:48  pdoubleya
 * Added to CVS.
 *

 *

*/


