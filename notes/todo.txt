multiple levels
    component level (little to no configuration)
    rendering context level (getters and setters for each feature)
    hacking level (subclass stuff, build your own settings, custom component)
    
    
component level is super easy. the (2) standard components should be in
org.xhtmlrenderer.*   and should require no configuration. HTMLPanel and ImageRenderer.  Bare minimum interface. Should focus on good defaults and doing it's job (being a JComponent, for example) well.

XHTMLPanel
    XHTMLPanel(URL)
    setDocument(URL)
    setDocument(Document,URL)
    
    that's it. uses default.css with sensible settings for attribute resolver and logging. does threaded layout by default
    
Graphics2DRenderer
    Graphics2DRenderer()
    render(url,graphics2d)
    render(document,url,graphics2d)
    
    sensible defaults. same as xhtmlpanel. respects hints set on the Graphics2D object passed in.  doesn't do threaded layout by default
    
both have get/setRenderingContext() methods to customize


RenderingContext
    contains all of the hooks for configuring everything. css module. fonts. logging. attribute resolver. layouts. everything. this doesn't need to be completely defined yet.  parts of Context will move into here.  has default implementation or can be subclassed (no interface?)
    event listeners are added here.  resource providers are added here. set the dom implementation.


---------
//build hack for first-letter
//right: for absolute layout
//first-line pseudo
//email guy about calendar text
//right floats
//paragraph extending floats
//resize inlines with padding and borders
//fix gap in splash page
//small caps
//move text up to baseline
//match up baselines of text w/ baseline vertical alignment
//justified text
//build calendar demo
//boolean to turn off layout threading
//integrate minium
//fix list items
//fix list item vertical positioning
//build table demo

--finish up hover support
easier headless interface
fix fixed background clipping error
floated divs work, but not floated spans. span should turn into a block when floated
make layoutfactory use display for generating layouts
left-right-top w/ static pos
fixed pos
fix crash on width = 0

table crashes on tbody
table crashes on empty tr
--crash w/ width = 50%
--% width for absolute layout
--styles on each border side

shrink-to-fit for absolute layout
browser not refreshing when I change styles bug. (clear context?)
multi floats on one line
fixed pos w/ bottom align
abs pos w/ bottom align
initial printing (no media or paging support)
copy text via mouse selection
remove whitespace regex
fix line breaking bugs
--------------------

====================
thoughts on hover
hover requires some sort of dynamic reflow
also needs a way of indentifying which areas of the screen can be hovered
could do a search for the box under the mouse cursor and then see if it has hover could track a list of hovered blocks relative to the canvas

for non-layout reflow we can just change colors and fonts, maybe borders as well. identify the hovered block, look up the hover styles. call restyle() on the block with the hovered
style. x,y,w,h won't change. then repaint the screen()

--------------------
--------------------


plans for threading

need to move layout to it's own thread

paint on htmlpanel will trigger the layout thread
set document will also trigger the layout thread
if layout thread already running on same document then don't do anything
if layout thread already running on older document, then stop it and start the new one

on paint()
    if layout thread done laying out then render it
    if layout thread not done then print a layout in progress message
initially put this code into the htmlpanel. move it out later

plan:
    startLayout() sync
    layoutDone() sync
    isLayoutDone() sync
    render() 


---------------

last bit for R4

//add javadocs online
--remove java.net stuff from javadocs pages
//build new news release
/link to RSS feed
//update src, binary, and java webstart links
//create sub document links on FAQ page
//update demo xhtml files w/ new information
//getting started guide
//    change class names and packages
//    update code for 'showing a page'
//        remove calls to setViewport blah
//make general util use object classloader
//host jnlp on my website
//upload zips to leased server
add version number to html panel and manifest of core-renderer.jar
//add java2html
//update build.xml

    
The Flying Saucer Team is proud to present Beta Release 4 (R4) of our 100% Java XHTML + CSS2 Renderer. This release focuses on infrastructure, code cleanup, and a new unit test system.

------------
The Flying Saucer Team is proud to present Beta Release 4 (R4) of our 100% Java XHTML + CSS2 Renderer.

This release brings updates to the infrastructure with

    a new package heirarchy
    a new unified CSS module
    automated unit tests to validate our rendering compliance
    new configuration and logging subsystem
    lots more code cleanup
    separate browser and about box sub projects
    
This release paves the way for the new features and speed increases coming
in R5.  Thanks for all of your support and please send us your feedback.

The Flying Saucer XHTMLRenderer can be used anywhere a program needs rich
styled content. This includes ebook readers, chat apps, splash screens,
help viewers, report generation, web-enabled thick clients, and online
music stores.



<p>The Flying Saucer Team is proud to present Beta Release 4 (R4) of our 100% Java XHTML + CSS2 Renderer.</p>

<p>This release brings updates to the infrastructure with:</p>
<ul>
    <li>a new package heirarchy</li>
    <li>a new unified CSS module</li>
    <li>automated unit tests to validate our rendering compliance</li>
    <li>new configuration and logging subsystem</li>
    <li>lots more code cleanup</li>
    <li>separate browser and about box sub projects</li>
</ul>

<p>This release paves the way for the new features and speed increases coming in R5.  Thanks for all of your support and please send us your feedback.</p>

<p>The Flying Saucer XHTMLRenderer can be used anywhere a program needs rich styled content. This includes ebook readers, chat apps, splash screens, help viewers, report generation, web-enabled thick clients, and online music stores.</p>

-------------

known bugs
//table cell and table widths don't work with percentages.
ex: 50% => 50px instead of .5 of parent width
fixed.

//bug where a table cell will get sized twice if it has an explict size,
once from the table and once directly from css

bug where it goes into an infinite loop if the available width < 0 or
there is an unbreakable that keeps going down line to line. it should stop after the first one down and then be added even if there isn't room.

if browser load crashes it breaks the app

ul li styling

NPE on selectors.xhtml

clipping problems

text not defaulting to times

second inf loop bug

test cm, inches, etc needs DPI setting ?

single pixel dotted border not working (borders.xhtml)

font not defaulting to times, paragraph.xhtml

bold-talic doesn't look right, paragraph.xhtml

borders on nested divs. nested.xhtml

list item styles have disappeared

close button on the dom inspector

test for linked styles

scroll doesn't reset on reload : HTMLPane


-------
-------------------

http://www.mlsb.com/mls/property_morephotos.cfm?ClientID=384&LIST_NUMB=40033129&list=2&ht=1&type=SFR
todo.txt

checklist for the 0.03 release

//suport the border shorthand: 1px solid black;
//transparent background image bug
//fix image crop bug
//htmlPanel option to set anti-aliasing
//add page down to the browser
//fix forms padding
---
cleanup html panel api (?)
view source on browser app
-------
cleanup the about API
    set doc
    set css
    constructors for each
    as jdialog (using static init?)
    as separate
    close box (hide or dispose?)
    stop anim
    start anim
    set anim speed

